unit frmMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Data.DBXMySQL, Data.DB,
  Data.SqlExpr, Data.FMTBcd, Vcl.Grids, Vcl.DBGrids, Vcl.DBCGrids, Vcl.ExtCtrls,
  Vcl.DBCtrls, Datasnap.Provider, Datasnap.DBClient, LogInFrm, Vcl.Buttons,
  Vcl.ComCtrls,frmClientSearch,frmAccounting, frmMaster, Vcl.Menus, Vcl.ImgList,
  Vcl.Imaging.jpeg, frmMailSetting;

type
  TMainframe = class(TForm)
    SQLQuery1: TSQLQuery;
    DataSource1: TDataSource;
    ClientDataSet1: TClientDataSet;
    DataSetProvider1: TDataSetProvider;
    pnlMenu: TPanel;
    Splitter1: TSplitter;
    pnlMain: TPanel;
    lblPnlTitle: TLabel;
    MainMenu1: TMainMenu;
    mmFile: TMenuItem;
    mmExit: TMenuItem;
    mmEdit: TMenuItem;
    mmOption: TMenuItem;
    pnlMainTitle: TPanel;
    ImageList1: TImageList;
    Image2: TImage;
    Image1: TImage;
    lblCurrentTitle: TLabel;
    pnlClient: TPanel;
    imgClient: TImage;
    pnlAccounting: TPanel;
    imgAccounting: TImage;
    pnlCustom: TPanel;
    imgCustom: TImage;
    mmMailSetting: TMenuItem;
    procedure SQLConnection1Login(Database: TSQLConnection;
      LoginParams: TStrings);
    procedure pnlAccountingMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pnlAccountingMouseEnter(Sender: TObject);
    procedure pnlAccountingMouseLeave(Sender: TObject);
    procedure pnlAccountingMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pnlClientMouseEnter(Sender: TObject);
    procedure pnlClientMouseLeave(Sender: TObject);
    procedure pnlClientMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pnlClientMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pnlClientClick(Sender: TObject);
    procedure pnlAccountingClick(Sender: TObject);
    procedure pnlCustomMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pnlCustomMouseEnter(Sender: TObject);
    procedure pnlCustomMouseLeave(Sender: TObject);
    procedure pnlCustomMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure pnlCustomClick(Sender: TObject);
    procedure mmMailSettingClick(Sender: TObject);
  private
    { Private declarations }
    procedure cleanPnlMain;
    procedure setCurrentTitle(str: String; int: Integer);
    //パネルをボタン風に動かすためのメソッドたち
    procedure behavePLBMouseUp(pnl: TPanel);
    procedure behavePLBMouseDown(pnl: TPanel);
    procedure behavePLBMouseEnter(pnl: TPanel;img:TImage);
    procedure behavePLBMouseLeave(pnl: TPanel;img:TImage);
    procedure initializeVariables;
  public
    { Public declarations }
    frmLogIn: TLogInFrame;
    frmClientSearch: TClientSearchframe;
    frmAccountingSearch: TAccountingFrame;
    frmMasterSetting: TMasterFrame;
    frmMailSetting: TMailSettingFrame;
    SQLConnection1: TSQLConnection;
    g_Username: String;
    g_Password: String;
    g_Database: String;
    g_SchemaName: String;
    g_HostName: String;
    g_DebugMode: Boolean;
    g_MailHost: String;
    g_MailPort: Word;
    g_MailUserName: String;
    g_MailPassword: String;
    g_MailFrom: String;
    constructor Create(AOwner: TComponent) ; override;
    destructor Destroy; override;
  end;

var
  Mainframe: TMainframe;

implementation

{$R *.dfm}

procedure TMainframe.behavePLBMouseDown(pnl: TPanel);
begin
  pnl.BevelOuter := bvLowered;
end;

procedure TMainframe.behavePLBMouseEnter(pnl: TPanel;img:TImage);
begin
  pnl.Color := $00CBC2FE;
  pnl.Font.Color := clWindow;
  pnl.Repaint;
  img.Repaint;
end;

procedure TMainframe.behavePLBMouseLeave(pnl: TPanel; img: TImage);
begin
  pnl.Color := clWindow;
  pnl.Font.Color := clBlack;
  pnl.BevelOuter := bvNone;
  img.Repaint;
end;

procedure TMainframe.behavePLBMouseUp(pnl: TPanel);
begin
  pnl.BevelOuter := bvNone;
end;

procedure TMainframe.cleanPnlMain;
begin
  frmClientSearch.pnlBase.Visible := False;
  frmAccountingSearch.pnlBase.Visible := False;
  frmMasterSetting.pnlBase.Visible := False;
end;

constructor TMainframe.Create(AOwner: TComponent);
begin
  initializeVariables;
  frmLogIn := TLogInFrame.Create(Self);
  If frmLogIn.ShowModal = 1 then begin
  if not SQLConnection1.Connected then Application.Terminate;
  inherited;
  SQLQuery1.SQLConnection := SQLConnection1;
  end else begin
    Application.Terminate;
  end;
  //ClientSearch
  frmClientSearch := TClientSearchframe.Create(self);
  frmClientSearch.sqlqSchoolName.SQLConnection := SQLConnection1;
  frmClientSearch.SQLQuery1.SQLConnection := SQLConnection1;
  //frmClientSearch.ClientDataSet1 := ClientDataSet1;
  //frmClientSearch.DBGrid1.DataSource := DataSource1;
  frmClientSearch.pnlBase.Parent := pnlMain;
  frmClientSearch.Initialize;
  frmClientSearch.pnlBase.Visible := False;
  frmClientSearch.m_DebugMode := g_DebugMode;

  //AccountingSearch
  frmAccountingSearch := TAccountingFrame.Create(Self);
  frmAccountingSearch.sqlqSchoolName.SQLConnection := SQLConnection1;
  frmAccountingSearch.SQLQuery1.SQLConnection := SQLConnection1;
  //frmAccountingSearch.ClientDataSet1 := ClientDataSet1;
  //frmAccountingSearch.DBGrid1.DataSource := DataSource1;
  frmAccountingSearch.pnlBase.Parent := pnlMain;
  frmAccountingSearch.pnlBase.Visible := False;

  //MasterSetting
  frmMasterSetting := TMasterFrame.Create(Self);
  frmMasterSetting.pnlBase.Parent := pnlMain;
  frmMasterSetting.pnlBase.Visible := False;
  //LastProc
  frmClientSearch.pnlBase.Visible := True;
  pnlClientMouseLeave(self);
  pnlAccountingMouseLeave(self);
  pnlCustomMouseLeave(Self);
  pnlClientClick(Self);
end;

destructor TMainframe.Destroy;
var writer: TStreamWriter;
begin
  //FileSave
  writer := TStreamWriter.Create('dbini.ini');
  if Length(g_Database) > 0 then writer.WriteLine('Database='+g_Database);
  if Length(g_HostName) > 0 then writer.WriteLine('HostName='+g_HostName);
  if Length(g_SchemaName) > 0 then writer.WriteLine('SchemeName='+g_SchemaName);
  if g_DebugMode then writer.WriteLine('Debug_flg=1')
                 else writer.WriteLine('Debug_flg=0');
  if Length(g_MailHost) > 0 then writer.WriteLine('MailHost='+g_MailHost);
  if g_MailPort > 0 then writer.WriteLine('MailPort='+IntToStr(g_MailPort));
  if Length(g_MailFrom) > 0 then writer.WriteLine('MailFrom='+g_MailFrom);
  if Length(g_MailUserName) > 0 then writer.WriteLine('MailUserName='+g_MailUserName);
  if Length(g_MailPassword) > 0 then writer.WriteLine('MailPassword='+g_MailPassword);
  writer.Free;
  inherited;
end;

procedure TMainframe.initializeVariables;
begin
  g_Username := '';
  g_Password := '';
  g_Database := '';
  g_SchemaName := '';
  g_HostName := '';
  g_DebugMode := False;
  g_MailHost := '';
  g_MailPort := 0;
  g_MailUserName := '';
  g_MailPassword := '';
  g_MailFrom := '';
end;

procedure TMainframe.mmMailSettingClick(Sender: TObject);
begin
  frmMailSetting := TMailSettingframe.Create(Self);
  frmMailSetting.initialize;
  frmMailSetting.ShowModal;
end;

procedure TMainframe.pnlCustomClick(Sender: TObject);
begin
  cleanPnlMain;
  frmMasterSetting.pnlBase.Visible := True;
  setCurrentTitle(pnlCustom.Caption,2);
end;

procedure TMainframe.pnlCustomMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  behavePLBMouseDown(pnlCustom);
end;

procedure TMainframe.pnlCustomMouseEnter(Sender: TObject);
begin
  behavePLBMouseEnter(pnlCustom,imgCustom);
end;

procedure TMainframe.pnlCustomMouseLeave(Sender: TObject);
begin
  behavePLBMouseLeave(pnlCustom,imgCustom);
end;

procedure TMainframe.pnlCustomMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  behavePLBMouseUp(pnlCustom);
end;

procedure TMainframe.pnlAccountingClick(Sender: TObject);
begin
  cleanPnlMain;
  frmAccountingSearch.pnlBase.Visible := True;
  setCurrentTitle(pnlAccounting.Caption,1);
end;

procedure TMainframe.pnlAccountingMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  behavePLBMouseDown(pnlAccounting);
end;

procedure TMainframe.pnlAccountingMouseEnter(Sender: TObject);
begin
  behavePLBMouseEnter(pnlAccounting,imgAccounting);
end;

procedure TMainframe.pnlAccountingMouseLeave(Sender: TObject);
begin
  behavePLBMouseLeave(pnlAccounting,imgAccounting);
end;

procedure TMainframe.pnlAccountingMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  behavePLBMouseUp(pnlAccounting);
end;

procedure TMainframe.pnlClientClick(Sender: TObject);
begin
  cleanPnlMain;
  frmClientSearch.pnlBase.Visible := True;
  setCurrentTitle(pnlClient.Caption,0);
end;

procedure TMainframe.pnlClientMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  behavePLBMouseDown(pnlClient);
end;

procedure TMainframe.pnlClientMouseEnter(Sender: TObject);
begin
  behavePLBMouseEnter(pnlClient,imgClient);
end;

procedure TMainframe.pnlClientMouseLeave(Sender: TObject);
begin
  behavePLBMouseLeave(pnlClient,imgClient);
end;

procedure TMainframe.pnlClientMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  behavePLBMouseUp(pnlClient);
end;

procedure TMainframe.setCurrentTitle(str: String; int: Integer);
begin
  lblCurrentTitle.Caption := str;
  Image1.Picture := nil;
  ImageList1.GetBitmap(int,Image1.Picture.Bitmap);
  Image1.Repaint;
end;

procedure TMainframe.SQLConnection1Login(Database: TSQLConnection;
  LoginParams: TStrings);
var strList: TStrings;
    i: Integer;
begin
  //ソースの内部実装がわからないためLoginParamsとSQLConnection1.Paramsの両方を変更する
  strList := TStringList.Create;
  strList.Add('Password=' + g_Password);
  strList.Add('User_Name=' + g_UserName);
  strList.Add('Database=edogijuku_db');
  LoginParams := strList;
  for i := 0 to SQLConnection1.Params.Count - 1 do begin
    if LowerCase(Copy(SQLConnection1.Params[i],1,8))='password' then begin
      SQLConnection1.Params[i] := 'Password=' + g_Password;
    end;
    if LowerCase(Copy(SQLConnection1.Params[i],1,9))='user_name' then begin
      SQLConnection1.Params[i] := 'User_Name=' + g_UserName;
    end;
  end;
  inherited;
end;

end.
